@page "/Clientes/Edit/"
@page "/Clientes/Edit{ClienteId:int}"
@inject ClienteServices clienteService
@rendermode InteractiveServer

<EditForm Model="Clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar cliente</h3>
        </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="ClienteId" class="form-label">ClienteId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Clientes.ClienteId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="Clientes.Nombres" class="form-control" />
                <ValidationMessage For="@(() => Clientes.Nombres)" />
            </div>

            <div class="mb-3">
                <label for="WhatsApp" class="form-label">WhatsApp:</label>
                <InputText @bind-Value="Clientes.WhatsApp" class="form-control" />
                <ValidationMessage For="@(() => Clientes.WhatsApp)" />
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Clientes/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? ClienteId { get; set; }
    public Clientes Clientes { get; set; } = new Clientes();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId.HasValue)
        {
            Clientes.ClienteId = ClienteId.Value;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        Existe = false;
        var ClienteE = await clienteService.Buscar(Clientes.ClienteId);

        if (ClienteE != null)
        {
            Clientes = ClienteE;
        }
        else
        {
            Nuevo();
        }
    }

    public void Nuevo()
    {
        Clientes = new Clientes();
        Existe = false;
    }

    public async Task Guardar()
    {
        var guardo = await clienteService.Guardar(Clientes);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await clienteService.Eliminar(Clientes.ClienteId);
        Nuevo();
    }
}
